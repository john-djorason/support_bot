"""
Telegram bot implementation using Telethon
"""

import os
import logging
import configparser
import json
import pyodbc
from pandas import DataFrame
from telethon import TelegramClient, events, functions, Button


class BotSettings:
    """A class to represent a Telegram-bot settings."""

    _parser = None

    def __init__(self, path='config.ini'):
        parser = configparser.ConfigParser()
        parser.read(path, 'utf-8')
        self._parser = parser

    def token(self):
        return self._read_setting('CREDENTIALS', 'TOKEN')

    def api_name(self):
        return self._read_setting('CREDENTIALS', 'NAME')

    def api_id(self):
        return int(self._read_setting('CREDENTIALS', 'ID'))

    def api_hash(self):
        return self._read_setting('CREDENTIALS', 'HASH')

    def path_logs(self):
        return self._read_setting('PATHS', 'LOGS')

    def path_auth(self):
        return self._read_setting('PATHS', 'AUTH')

    def path_users(self):
        return self._read_setting('PATHS', 'USERS')

    def path_doc(self):
        return self._read_setting('PATHS', 'DOC')

    def path_media(self, user):
        return self._read_setting('PATHS', 'MEDIA') + str(user) + '\\'

    def default_manager(self):
        return int(self._read_setting('MANAGERS', 'DEFAULT'))

    def documents_manager(self):
        return int(self._read_setting('MANAGERS', 'DOCUMENTS'))

    def admin_manager(self):
        return int(self._read_setting('MANAGERS', 'ADMIN'))

    def _read_setting(self, section, name):
        return self._parser[section][name]


class Bot:
    """
    A class to represent a Telegram-bot with all of its functionality.

    Methods
    -------
    start() : None
        Starts the bot
    """

    _telegram = None
    _settings = None
    _clients_data = None

    def __init__(self, path_settings='config.ini'):
        self._settings = BotSettings(path_settings)
        self._init_clients_data()

    def start(self):
        """Starting the bot"""

        # Logging
        path_logs = self._settings.path_logs()
        logging.basicConfig(
            filename=path_logs,
            format='[%(levelname) 5s/%(asctime)s] %(name)s: %(message)s',
            level=logging.WARNING
        )

        # Initializing
        telegram = TelegramClient(
            self._settings.api_name(),
            self._settings.api_id(),
            self._settings.api_hash()
        )

        managers = self._managers()

        @telegram.on(events.NewMessage(chats=managers))
        async def handler_manager(event):
            await self._handle_manager(event)

        @telegram.on(events.NewMessage(chats=managers, blacklist_chats=True))
        async def handler_client(event):
            await self._handle_client(event)

        self._telegram = telegram
        self._telegram.start()
        self._telegram.run_until_disconnected()

    async def _handle_manager(self, event):
        """Handles events in a manager's chat."""

        # New message
        message = event.message
        manager = message.peer_id.user_id
        text = message.message

        # Get a client from the reply message
        client = 0
        if message.reply_to is not None:
            chat = await message.get_chat()
            reply_id = message.reply_to.reply_to_msg_id
            reply_msg = await self._telegram.get_messages(chat, ids=reply_id)
            if reply_msg is not None:
                try:
                    reply_text = reply_msg.message

                    start_text = '–ö–ª—ñ—î–Ω—Ç: '
                    end_text = '\n'
                    start = reply_text.find(start_text) + len(start_text)
                    end = reply_text.find(end_text)

                    client = int(reply_text[start:end])
                except:
                    client = 0

        # Start bot
        if text.startswith('/start'):
            welcome_text = '–û–Ω–ª–∞–π–Ω-–ø–æ–º—ñ—á–Ω–∏–∫ –≤—ñ—Ç–∞—î –í–∞—Å!\n'
            welcome_text += '–í —Ü–µ–π —á–∞—Ç –±—É–¥—É—Ç—å –Ω–∞–¥—Ö–æ–¥–∏—Ç–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç—ñ–≤.'
            await self._telegram.send_message(manager, welcome_text)

            doc_text = '–ü—Ä–∏ –±–∞–∂–∞–Ω–Ω—ñ –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å –∑ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ üëÜ'
            filepath = self._settings.path_doc()
            await self._telegram.send_file(manager, filepath, caption=doc_text)
        # Refresh bot
        elif text.startswith('/refresh'):
            if manager == self._manager_admin():
                old_df = self._clients_data.copy()
                self._init_clients_data()
                new_df = self._clients_data
                for index, row in new_df.iterrows():
                    find_rows = old_df.loc[old_df['id'] == row['id']]
                    if find_rows.empty:
                        continue

                    found_row = find_rows.iloc[0]
                    row['chatting'] = found_row.chatting
                    row['text'] = found_row.text
                    row['documenting'] = found_row.documenting
        # Initiate a conversation with a client
        elif text.startswith('/initiate_task'):
            str_id = text.replace('/initiate_task_', '')
            try:
                client_id = int(str_id)
            except:
                client_id = 0

            if client_id:
                if self._is_chatting(client_id):
                    send_text = '–£ –∫–ª—ñ—î–Ω—Ç–∞ –≤–∂–µ —î –≤—ñ–¥–∫—Ä–∏—Ç–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è'
                    await self._telegram.send_message(manager, send_text)
                    return

                # Send an initiate message to the manager
                send_text = '–ö–ª—ñ—î–Ω—Ç: ' + str(client_id)
                send_text += '\n–ù–∞–ø–∏—à—ñ—Ç—å –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—É —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –π–æ–≥–æ —è–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è üëá'
                await self._telegram.send_message(manager, send_text)

                # Send an initiate message to the chosen client
                new_text = '–ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–æ–∑–ø–æ—á–∞–≤ –¥—ñ–∞–ª–æ–≥, –æ—á—ñ–∫—É–π—Ç–µ –Ω–∞ –π–æ–≥–æ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è...'
                keyboard = Button.force_reply()
                await self._telegram.send_message(client_id, new_text, buttons=keyboard)
                self._set_chatting(client_id, True)
            else:
                # Choose a client
                clients = self._clients_by_manager(manager)
                send_text = '–û–±–µ—Ä—ñ—Ç—å –∫–ª—ñ—î–Ω—Ç–∞, —â–æ–± –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –π–æ–º—É –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è:\n'
                max_len = 2000
                for el in clients:
                    cl_id = el['id']
                    name = el['name']
                    enterprise = el['enterprise']
                    send_text += f'{enterprise} ({name}) - /initiate_task_{cl_id}\n'
                    if len(send_text) > max_len:
                        await self._telegram.send_message(manager, send_text)
                        send_text = ''
                if send_text:
                    await self._telegram.send_message(manager, send_text)

        # No conversations without a client's ID
        if not client:
            return

        # Finish the conversation
        if text.startswith('/finish_task'):
            if not self._is_chatting(client):
                return

            new_text = '–ó–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º'
            keyboard = Button.text('‚§¥ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', resize=True)
            await self._telegram.send_message(client, new_text, buttons=keyboard)
            self._set_chatting(client, False)
        # Continue the conversation
        else:
            filepath = await self._get_media_from_message(message)
            if filepath:
                await self._telegram.send_file(client, filepath, caption=text)
                os.remove(filepath)
            else:
                await self._telegram.send_message(client, text)

    async def _handle_client(self, event):
        """Handles events in a client's chat."""

        # New message
        message = event.message
        client = message.peer_id.user_id
        manager = self._manager_by_client(client)
        text = message.message

        # Global options
        option_back = '‚§¥ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é'
        option_comment = '‚Åâ –ó–≤–µ—Ä–Ω—É—Ç–∏—Å—å'
        option_ask = '‚Åâ –ó–∞–ø–∏—Ç–∞—Ç–∏'

        menu_back = Button.text(option_back, resize=True)
        menu_comment = [Button.text(option_comment, resize=True), menu_back]
        menu_ask = [Button.text(option_ask, resize=True), menu_back]
        menu_reply = Button.force_reply()

        # Main menu
        option_goods = 'üíä –¢–æ–≤–∞—Ä–∏'
        option_pharmacies = 'üè• –ê–ø—Ç–µ–∫–∏'
        option_documents = 'üìë –î–æ–∫—É–º–µ–Ω—Ç–∏'
        option_reports = 'üìà –ó–≤—ñ—Ç–∏'
        option_defects = 'üõ† –¢–µ—Ö–Ω—ñ—á–Ω–∏–π –∑–±—ñ–π'

        menu_main = [
            [Button.text(option_goods, resize=True), Button.text(option_pharmacies, resize=True)],
            [Button.text(option_documents, resize=True), Button.text(option_reports, resize=True)],
            [Button.text(option_defects, resize=True)]
        ]

        # Goods menu
        option_goods_find = 'üîé –¢–æ–≤–∞—Ä –Ω–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è'
        option_goods_add = 'üì• –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä'
        option_goods_link = 'ü™¢ –ó–º—ñ–Ω–∏—Ç–∏ –ø—Ä–∏–≤\'—è–∑–∫—É —Ç–æ–≤–∞—Ä–∞'

        menu_goods = [
            [Button.text(option_goods_find, resize=True)],
            [Button.text(option_goods_add, resize=True)],
            [Button.text(option_goods_link, resize=True)],
            menu_ask
        ]

        # Pharmacies menu
        option_pharmacies_find = 'üîé –ê–ø—Ç–µ–∫–∞ –Ω–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è'
        option_pharmacies_reply = 'üîÑ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è'
        option_pharmacies_add = 'üè• –î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –∞–ø—Ç–µ–∫—É'
        option_pharmacies_schedule = 'üìÜ –ó–º—ñ–Ω–∏—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫'
        option_pharmacies_phone = '‚òé –ó–º—ñ–Ω–∏—Ç–∏ –Ω–æ–º–µ—Ä'
        option_pharmacies_map = 'üó∫ –ó–º—ñ–Ω–∏—Ç–∏ —Ç–æ—á–∫—É'
        option_pharmacies_name = 'üÜï –ó–º—ñ–Ω–∏—Ç–∏ –Ω–∞–∑–≤—É'
        option_pharmacies_disable = 'üö´ –í—ñ–¥–∫–ª—é—á–∏—Ç–∏ –∞–ø—Ç–µ–∫—É'
        option_pharmacies_stop = '‚ùå –í—ñ–¥–∫–ª—é—á–∏—Ç–∏ –º–µ—Ä–µ–∂—É'
        option_pharmacies_client = 'üìû –ù–æ–º–µ—Ä –∫–ª—ñ—î–Ω—Ç–∞'

        menu_pharmacies = [
            [Button.text(option_pharmacies_find, resize=True), Button.text(option_pharmacies_reply, resize=True)],
            [Button.text(option_pharmacies_add, resize=True), Button.text(option_pharmacies_client, resize=True)],
            [Button.text(option_pharmacies_schedule, resize=True), Button.text(option_pharmacies_phone, resize=True)],
            [Button.text(option_pharmacies_map, resize=True), Button.text(option_pharmacies_name, resize=True)],
            [Button.text(option_pharmacies_disable, resize=True)],
            [Button.text(option_pharmacies_stop, resize=True)],
            menu_ask
        ]

        # Documents menu
        option_documents_contracts = 'üìú –î–æ–≥–æ–≤–æ—Ä–∏'
        option_documents_invoices = 'üßæ –†–∞—Ö—É–Ω–∫–∏'
        option_documents_acts = 'üìá –ê–∫—Ç–∏'
        option_documents_contact = 'üë§ –ó–º—ñ–Ω–∏—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É –æ—Å–æ–±—É'

        menu_documents = [
            [Button.text(option_documents_contracts, resize=True)],
            [Button.text(option_documents_invoices, resize=True), Button.text(option_documents_acts, resize=True)],
            [Button.text(option_documents_contact, resize=True)],
            menu_ask
        ]

        # Reports menu
        option_reports_link = 'ü™¢ –¢–æ–≤–∞—Ä–∏ –±–µ–∑ –ø—Ä–∏–≤\'—è–∑–∫–∏'
        option_reports_quality = 'üìà –Ø–∫—ñ—Å—Ç—å'
        option_reports_competitors = 'üó∫ –û—Ç–æ—á–µ–Ω–Ω—è'
        option_reports_finance = 'üí∞ –§—ñ–Ω–∞–Ω—Å–∏'

        menu_reports = [
            [Button.text(option_reports_link, resize=True)],
            [
                Button.text(option_reports_quality, resize=True),
                Button.text(option_reports_competitors, resize=True),
                Button.text(option_reports_finance, resize=True)
            ],
            menu_ask
        ]

        # Defects menu
        option_defects_account = 'üñ• –û—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç'
        option_defects_orders = 'üõí –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è'
        option_defects_rests = 'üì¶ –ó–∞–ª–∏—à–∫–∏'

        menu_defects = [
            [Button.text(option_defects_account, resize=True)],
            [Button.text(option_defects_orders, resize=True), Button.text(option_defects_rests, resize=True)],
            menu_ask
        ]

        # Common text
        text_auth = '–î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—å.\n' \
                    '–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞ üëá'
        text_comment = '–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –í–∞—à–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è üñå'
        text_ask = '–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è!\n' \
                   '–Ø–∫—â–æ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–µ–∑ –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, ' \
                   '–í–∞—à–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –º–æ–∂–µ –æ–±—Ä–æ–±–ª—è—Ç–∏—Å—è –±—ñ–ª—å—à —Ç—Ä–∏–≤–∞–ª–∏–π —Ç–µ—Ä–º—ñ–Ω (–¥–æ 48 –≥–æ–¥–∏–Ω).\n' + text_comment

        # Default data
        new_text = '–û–±–µ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Ä–æ–∑–¥—ñ–ª, –∫–æ—Ä–∏—Å—Ç—É—é—á–∏—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂—á–µ üëá'
        keyboard = menu_comment

        # Previous text
        prev_text = ''
        if message.reply_to is not None:
            reply_id = message.reply_to.reply_to_msg_id
            reply_msg = await self._telegram.get_messages(client, ids=reply_id)
            if reply_msg is not None:
                prev_text = reply_msg.message

        # Respond type
        is_auth = True if prev_text.endswith(text_auth) else False
        is_main = True if text.startswith('/start') or text == option_back else False

        # Auth
        if is_auth:
            try:
                code = int(text)
            except:
                code = 0

            if code and code in self._get_enterprises_from_crm():
                name = ''
                sender = await event.get_sender()
                if sender is not None:
                    first_name = sender.first_name
                    if first_name is not None:
                        name += first_name
                    last_name = sender.last_name
                    if last_name is not None:
                        if name:
                            name += ' '
                        name += last_name
                    user_name = sender.username
                    if user_name is not None:
                        if name:
                            name += ' '
                        name += '(' + user_name + ')'
                manager = self._manager_by_enterprise(code)
                self._set_auth(client, name, code, manager)

                ent_names = self._get_enterprise_name_from_crm(code)
                new_text = '–í–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–ª–∏—Å—è —è–∫ –ø—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏–∫ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞ ' + ent_names[0] + '.\n' + new_text
                keyboard = menu_main
            else:
                new_text = '–ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞!\n'
                new_text += '(–¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–Ω—è –∫–æ–¥—É –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É)\n\n'
                new_text += text_auth
                keyboard = menu_reply
        # Need auth
        elif not self._is_auth(client):
            new_text = text_auth
            keyboard = menu_reply
        # Task: Conversation
        elif self._is_chatting(client):
            name = self._client_name(client)
            if self._is_documenting(client):
                manager = self._manager_by_documents()
            filepath = await self._get_media_from_message(message)

            send_text = '–ö–ª—ñ—î–Ω—Ç: ' + str(client)
            send_text += '\n–Ü–º\'—è: ' + name
            send_text += '\n' + text
            if filepath:
                await self._telegram.send_file(manager, filepath, caption=send_text)
                os.remove(filepath)
            else:
                await self._telegram.send_message(manager, send_text)

            new_text = ''
            keyboard = menu_reply
        # Ask/Comment
        elif prev_text in (text_ask, text_comment):
            name = self._client_name(client)
            enterprise = self._enterprise_by_client(client)
            topic = self._get_last_text(client)
            filepath = await self._get_media_from_message(message)
            if self._is_documenting(client):
                manager = self._manager_by_documents()

            send_text = '–ö–ª—ñ—î–Ω—Ç: ' + str(client)
            send_text += '\n–Ü–º\'—è: ' + name
            send_text += '\n–ü—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–æ: ' + str(enterprise)
            send_text += '\n–¢–µ–º–∞: ' + topic
            send_text += '\n–¢–µ–∫—Å—Ç: ' + text
            if filepath:
                await self._telegram.send_file(manager, filepath, caption=send_text)
                os.remove(filepath)
            else:
                await self._telegram.send_message(manager, send_text)
            self._set_chatting(client, True)

            max_hours = 48
            # Goods
            if topic == option_goods_find:
                max_hours = 6
            elif topic == option_goods_add:
                max_hours = 24
            elif topic == option_goods_link:
                max_hours = 24
            # Pharmacies
            elif topic == option_pharmacies_find:
                max_hours = 6
            elif topic == option_pharmacies_reply:
                max_hours = 4
            elif topic == option_pharmacies_add:
                max_hours = 24
            elif topic == option_pharmacies_schedule:
                max_hours = 6
            elif topic == option_pharmacies_phone:
                max_hours = 24
            elif topic == option_pharmacies_map:
                max_hours = 24
            elif topic == option_pharmacies_name:
                max_hours = 6
            elif topic == option_pharmacies_disable:
                max_hours = 4
            elif topic == option_pharmacies_stop:
                max_hours = 2
            elif topic == option_pharmacies_client:
                max_hours = 6
            # Documents
            elif topic == option_documents_contracts:
                max_hours = 24
            elif topic == option_documents_invoices:
                max_hours = 6
            elif topic == option_documents_acts:
                max_hours = 24
            elif topic == option_documents_contact:
                max_hours = 24
            # Reports
            elif topic == option_reports_link:
                max_hours = 24
            elif topic == option_reports_quality:
                max_hours = 24
            elif topic == option_reports_competitors:
                max_hours = 24
            elif topic == option_reports_finance:
                max_hours = 24
            # Defects
            elif topic == option_defects_account:
                max_hours = 24
            elif topic == option_defects_orders:
                max_hours = 6
            elif topic == option_defects_rests:
                max_hours = 6

            new_text = f'–ó–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ - –æ—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–¥–æ {max_hours} –≥–æ–¥–∏–Ω)'
            keyboard = menu_reply
        # Option Ask/Comment
        elif text in (option_ask, option_comment):
            if text == option_ask:
                new_text = text_ask
            else:
                new_text = text_comment
            keyboard = menu_reply
        # Section Main
        elif is_main:
            keyboard = menu_main
            self._set_documenting(client, False)
        # Section Goods
        elif text == option_goods:
            keyboard = menu_goods
        # Goods Option: Find
        elif text == option_goods_find:
            new_text = '–¢–æ–≤–∞—Ä –º–æ–∂–µ –Ω–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏—Å—è –∑ –¥–µ—è–∫–∏—Ö –ø—Ä–∏—á–∏–Ω, –æ—Å–Ω–æ–≤–Ω—ñ –∑ —è–∫–∏—Ö:\n' \
                       ' üîπ –ê–ø—Ç–µ–∫–∞ –Ω–µ –Ω–∞–¥—Å–∏–ª–∞—î –∑–∞–ª–∏—à–∫–∏ —Ç–æ–≤–∞—Ä—É\n' \
                       ' üîπ –¶—ñ–Ω–∞ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –≤–∏—â–∞ –≤—ñ–¥ —Ü—ñ–Ω–∏ –≤ –∞–ø—Ç–µ—Ü—ñ\n' \
                       ' üîπ –í—ñ–¥—Å—É—Ç–Ω—è –ø—Ä–∏–≤\'—è–∑–∫–∞ —Ç–æ–≤–∞—Ä–Ω–æ—ó –ø–æ–∑–∏—Ü—ñ—ó\n' \
                       ' üîπ –¢–æ–≤–∞—Ä –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π\n' \
                       ' üîπ –ê–ø—Ç–µ–∫–∞ –≤—ñ–¥–∫–ª—é—á–µ–Ω–∞\n' \
                       '–í–∏ –º–æ–∂–µ—Ç–µ –∑–Ω–∞–π—Ç–∏ –ø—Ä–∏—á–∏–Ω—É, –∫–æ—Ä–∏—Å—Ç—É—é—á–∏—Å—å —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:\n' \
                       '–£ —Ä–∞–∑—ñ, —è–∫—â–æ –ø—Ä–∏—á–∏–Ω–∞ –Ω–µ –≤–∏—è–≤–ª–µ–Ω–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä—É, ' \
                       '–Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É ¬´' + option_comment + '¬ª —Ç–∞ –≤–∫–∞–∂—ñ—Ç—å:\n' \
                       ' üîπ –ù–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É\n' \
                       ' üîπ –í–∏—Ä–æ–±–Ω–∏–∫–∞\n' \
                       ' üîπ –í–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –∫–æ–¥ —Ç–æ–≤–∞—Ä—É\n' \
                       ' üîπ –°–µ—Ä—ñ–π–Ω–∏–π –Ω–æ–º–µ—Ä –∞–ø—Ç–µ–∫–∏'
        # Goods Option: Add
        elif text == option_goods_add:
            new_text = '–î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É –≤ –∫–∞—Ç–∞–ª–æ–≥ –º–æ–∂–ª–∏–≤–æ ' \
                       '—É —Ä–∞–∑—ñ –æ–¥–µ—Ä–∂–∞–Ω–Ω—è –≤—ñ–¥ –∑–∞—è–≤–Ω–∏–∫–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–æ–≤–∞—Ä –≤ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ:\n' \
                       '–¢–æ–≤–∞—Ä–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è –±—É–¥–µ –≤–≤–µ–¥–µ–Ω–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥, –∞ –ø–æ —Ñ–∞–∫—Ç—É ' \
                       '–≤–≤–µ–¥–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏ —Ç–æ–≤–∞—Ä—É –≤ –∫–∞—Ç–∞–ª–æ–≥, –í–∞—Å –ø–æ–≤—ñ–¥–æ–º–ª—è—Ç—å üîî'
        # Goods Option: Link
        elif text == option_goods_link:
            new_text = '–£ —Ä–∞–∑—ñ –≤–∏—è–≤–ª–µ–Ω–Ω—è –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ—ó –ø—Ä–∏–≤\'—è–∑–∫–∏ —Ç–æ–≤–∞—Ä—É, —î –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å —ó—ó –≤—ñ–¥–∫–æ—Ä–∏–≥—É–≤–∞—Ç–∏, ' \
                       '–≤–∏–∫–æ–Ω–∞–≤—à–∏ –¥—ñ—ó, –æ–ø–∏—Å–∞–Ω—ñ –≤ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:\n' \
                       '–ü—ñ—Å–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –ø—Ä–∏–≤\'—è–∑–∫–∏ —Ç–æ–≤–∞—Ä—É –≤ –æ—Å–æ–±–∏—Å—Ç–æ–º—É –∫–∞–±—ñ–Ω–µ—Ç—ñ, ' \
                       '–≤–æ–Ω–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ü—ñ—é —ñ —Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è —Ü—å–æ–≥–æ —Ñ—ñ–∫—Å—É—é—Ç—å—Å—è –∑–º—ñ–Ω–∏ ü™¢'
        # Section Pharmacies
        elif text == option_pharmacies:
            keyboard = menu_pharmacies
        # Pharmacies Option: Find
        elif text == option_pharmacies_find:
            new_text = '–ü—Ä–∏–ø–∏–Ω–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∞–ø—Ç–µ–∫–∏ –Ω–∞ –º–æ–∂–ª–∏–≤–æ –∑–∞ —Ç–∞–∫–∏—Ö –æ–±—Å—Ç–∞–≤–∏–Ω:\n' \
                       ' üîπ –ê–ø—Ç–µ–∫–∞ –≤—ñ–¥–∫–ª—é—á–µ–Ω–∞ –≤ –æ—Å–æ–±–∏—Å—Ç–æ–º—É –∫–∞–±—ñ–Ω–µ—Ç—ñ\n' \
                       ' üîπ –°–≤–æ—î—á–∞—Å–Ω–æ –Ω–µ—Å–ø–ª–∞—á–µ–Ω—ñ —Ä–∞—Ö—É–Ω–∫–∏\n' \
                       ' üîπ –Ñ –Ω–µ–æ—Ç—Ä–∏–º–∞–Ω—ñ/–Ω–µ–æ–±—Ä–æ–±–ª–µ–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n' \
                       ' üîπ –í—ñ–¥—Å—É—Ç–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø–æ –∑–∞–ª–∏—à–∫–∞–º —Ç–æ–≤–∞—Ä—ñ–≤ —ñ —Ü—ñ–Ω –±—ñ–ª—å—à–µ –¥–æ–±–∏\n' \
                       '–°–∞–º–æ—Å—Ç—ñ–π–Ω–æ –≤–∏—è–≤–∏—Ç–∏ –ø—Ä–∏—á–∏–Ω—É –º–æ–∂–ª–∏–≤–æ, –∫–æ—Ä–∏—Å—Ç—É—é—á–∏—Å—å —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:\n' \
                       '–Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –¥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n' \
                       '–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É ¬´' + option_comment + '¬ª —Ç–∞ –≤–∫–∞–∂—ñ—Ç—å –°–ï–†–Ü–ô–ù–ò–ô –ù–û–ú–ï–† –∞–ø—Ç–µ–∫–∏ üëá'
            # Pharmacies Option: Reply
        elif text == option_pharmacies_reply:
            new_text = '–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É ¬´' + option_comment + '¬ª —Ç–∞ –≤–ø–∏—à—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è üëá'
        # Pharmacies Option: Add
        elif text == option_pharmacies_add:
            new_text = '–î–ª—è —Ç–æ–≥–æ, —â–æ–± –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –∞–ø—Ç–µ–∫—É üè• –∑ –º–µ—Ç–æ—é —ó—ó –ø–æ–¥–∞–ª—å—à–æ—ó —Ç—Ä–∞–Ω—Å–ª—è—Ü—ñ—ó, ' \
                       '–ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ–Ω–∞—Ç–∏ –¥—ñ—ó –æ–ø–∏—Å–∞–Ω—ñ –≤ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:\n' \
                       '–ü–æ —Ñ–∞–∫—Ç—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∞–ø—Ç–µ–∫–∏ –≤ —Ä–µ—î—Å—Ç—Ä –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ —Ä–æ–±–æ—Ç—ñ –∑ –∞–ø—Ç–µ—á–Ω–∏–º–∏ –º–µ—Ä–µ–∂–∞–º–∏ ' \
                       '–≤—ñ–¥–ø—Ä–∞–≤–∏—Ç—å –í–∞–º —Å–µ—Ä—ñ–π–Ω–∏–π –Ω–æ–º–µ—Ä —Ü—ñ—î—ó –∞–ø—Ç–µ–∫–∏ –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –≤–∏–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑–∞–ª–∏—à–∫—ñ–≤ —ñ —Ü—ñ–Ω.'
        # Pharmacies Option: Schedule/Phone
        elif text == option_pharmacies_schedule or text == option_pharmacies_phone:
            new_text = '–ó–º—ñ–Ω–∏—Ç–∏ üìÜ –≥—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏ –∞–ø—Ç–µ–∫–∏ –∞–±–æ ‚òé —Ç–µ–ª–µ—Ñ–æ–Ω –º–æ–∂–ª–∏–≤–æ, ' \
                       '–∫–æ—Ä–∏—Å—Ç—É—é—á–∏—Å—å —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:\n'
        # Pharmacies Option: Map
        elif text == option_pharmacies_map:
            new_text = '–í —Ä–∞–∑—ñ –≤–∏—è–≤–ª–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏ —â–æ–¥–æ —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è –∞–ø—Ç–µ–∫–∏ –Ω–∞ –∫–∞—Ä—Ç—ñ üó∫ ' \
                       '–º–æ–∂–ª–∏–≤–æ –∑–º—ñ–Ω–∏—Ç–∏ —Ç–æ—á–∫—É, –∫–æ—Ä–∏—Å—Ç—É—é—á–∏—Å—å —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:\n' \
                       '–ü—ñ—Å–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó –≤ –æ—Å–æ–±–∏—Å—Ç–æ–º—É –∫–∞–±—ñ–Ω–µ—Ç—ñ, ' \
                       '–∑–º—ñ–Ω–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç—å –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Ç–∞, –ø—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º, —Ñ—ñ–∫—Å—É—é—Ç—å—Å—è –Ω–∞ –∫–∞—Ä—Ç—ñ üìç'
        # Pharmacies Option: Name
        elif text == option_pharmacies_name:
            new_text = '–î–ª—è –∑–º—ñ–Ω–∏ –Ω–∞–∑–≤–∏ –∞–ø—Ç–µ–∫–∏ –≤–∏–∫–æ–Ω–∞–π—Ç–µ –¥—ñ—ó, –≤–∫–∞–∑–∞–Ω—ñ –≤ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:\n'
        # Pharmacies Option: Disable
        elif text == option_pharmacies_disable:
            new_text = '–í—ñ–¥–∫–ª—é—á–∏—Ç–∏ –∞–ø—Ç–µ–∫—É üö´ –≤—ñ–¥ —Ç—Ä–∞–Ω—Å–ª—è—Ü—ñ—ó –Ω–∞ —Å–∞–π—Ç—ñ –º–æ–∂–ª–∏–≤–æ —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ –≤ –æ—Å–æ–±–∏—Å—Ç–æ–º—É –∫–∞–±—ñ–Ω–µ—Ç—ñ, ' \
                       '–∫–æ—Ä–∏—Å—Ç—É—é—á–∏—Å—å —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:\n' \
                       '–Ø–∫—â–æ –∞–ø—Ç–µ–∫–∞ –≤—ñ–¥–∫–ª—é—á–∞—î—Ç—å—Å—è –Ω–∞ —Ç—Ä–∏–≤–∞–ª–∏–π —Ç–µ—Ä–º—ñ–Ω üìÜ —ñ –≤ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –º—ñ—Å—è—Ü—ñ ' \
                       '–Ω–µ –ø–ª–∞–Ω—É—î—Ç—å—Å—è —Ä–æ–±–æ—Ç–∞, –æ–±–æ–≤\'—è–∑–∫–æ–≤–æ –ü–û–í–Ü–î–û–ú–¢–ï –ø—Ä–æ —Ü–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞‚ùó üëá'
        # Pharmacies Option: Stop
        elif text == option_pharmacies_stop:
            new_text = '–î–ª—è –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –º–µ—Ä–µ–∂—ñ ‚ùå –≤—ñ–¥ —Ç—Ä–∞–Ω—Å–ª—è—Ü—ñ—ó, –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –º–µ–Ω–µ–¥–∂–µ—Ä—É.\n' \
                       '–î–ª—è —Ü—å–æ–≥–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É ¬´' + option_comment + '¬ª ' \
                       '—Ç–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–æ –ø–æ–≤—ñ–¥–æ–º—Ç–µ –ø—Ä–∏—á–∏–Ω—É –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è üëá'
        # Pharmacies Option: Client
        elif text == option_pharmacies_client:
            new_text = '–í–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä –±—Ä–æ–Ω—ñ —Ç–∞ –ø—Ä–∏—á–∏–Ω—É –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ –Ω–∞–¥–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª—ñ—î–Ω—Ç–∞ üëá'
        # Section Documents
        elif text == option_documents:
            keyboard = menu_documents
        # Documents Option: Contracts
        elif text == option_documents_contracts:
            new_text = '–ü–∏—Ç–∞–Ω–Ω—è –ø–æ –¥–æ–≥–æ–≤–æ—Ä–∞–º –í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–ø—Ä–∞–≤–∏—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É.\n' \
                       '–î–ª—è —Ü—å–æ–≥–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É ¬´' + option_comment + '¬ª —Ç–∞ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∑–∞–ø–∏—Ç–∞–Ω–Ω—è üëá'
            self._set_documenting(client, True)
        # Documents Option: Invoices
        elif text == option_documents_invoices:
            new_text = '–ü–∏—Ç–∞–Ω–Ω—è –ø–æ —Ä–∞—Ö—É–Ω–∫–∞–º –í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–ø—Ä–∞–≤–∏—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É.\n' \
                       '–î–ª—è —Ü—å–æ–≥–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É ¬´' + option_comment + '¬ª —Ç–∞ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∑–∞–ø–∏—Ç–∞–Ω–Ω—è üëá'
            self._set_documenting(client, True)
        # Documents Option: Acts
        elif text == option_documents_acts:
            new_text = '–ü–∏—Ç–∞–Ω–Ω—è –ø–æ –∞–∫—Ç–∞–º –í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–ø—Ä–∞–≤–∏—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É.\n' \
                       '–î–ª—è —Ü—å–æ–≥–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É ¬´' + option_comment + '¬ª —Ç–∞ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∑–∞–ø–∏—Ç–∞–Ω–Ω—è üëá'
            self._set_documenting(client, True)
        # Documents Option: Contact
        elif text == option_documents_contact:
            new_text = '–ü—Ä–∏ –∑–º—ñ–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ—ó –æ—Å–æ–±–∏, ' \
                       '–ø—Ä–æ—Ö–∞–Ω–Ω—è –Ω–∞–¥–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ü–Ü–ë, –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω, e-mail –Ω–æ–≤–æ—ó –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ—ó –æ—Å–æ–±–∏.\n' \
                       '–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É ¬´' + option_comment + '¬ª —Ç–∞ –≤–≤–µ–¥—ñ—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–∏—Ö üëá'
        # Section Reports
        elif text == option_reports:
            keyboard = menu_reports
        # Reports Option: Link
        elif text == option_reports_link:
            new_text = '–î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –ø–æ —Ä–æ–±–æ—Ç—ñ –∑—ñ –∑–≤—ñ—Ç–æ–º ¬´–¢–æ–≤–∞—Ä–∏ –±–µ–∑ –ø—Ä–∏–≤\'—è–∑–∫–∏¬ª ' \
                       '—Ç–∞ –æ–ø–∏—Å –ø–æ–ª—ñ–≤ –∑–≤—ñ—Ç—É —î –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:\n' \
                       '–Ø–∫—â–æ –í–∏ –Ω–µ –∑–Ω–∞–π—à–ª–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Å–≤–æ—î –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –¥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n' \
                       '–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É ¬´' + option_comment + '¬ª, –æ–ø–∏—à—ñ—Ç—å –ø—Ä–æ–±–ª–µ–º—É ‚úç —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. ' \
                       '–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–≤\'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –≤ –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏–π —Ç–µ—Ä–º—ñ–Ω üëá'
        # Reports Option: Quality
        elif text == option_reports_quality:
            new_text = '–î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –ø–æ —Ä–æ–±–æ—Ç—ñ –∑—ñ –∑–≤—ñ—Ç–æ–º ¬´–Ø–∫—ñ—Å—Ç—å¬ª ' \
                       '—Ç–∞ –æ–ø–∏—Å –ø–æ–ª—ñ–≤ –∑–≤—ñ—Ç—É —î –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:\n' \
                       '–Ø–∫—â–æ –í–∏ –Ω–µ –∑–Ω–∞–π—à–ª–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Å–≤–æ—î –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –¥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n' \
                       '–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É ¬´' + option_comment + '¬ª, –æ–ø–∏—à—ñ—Ç—å –ø—Ä–æ–±–ª–µ–º—É ‚úç —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. ' \
                       '–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–≤\'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –≤ –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏–π —Ç–µ—Ä–º—ñ–Ω üëá'
        # Reports Option: Competitors
        elif text == option_reports_competitors:
            new_text = '–î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –ø–æ —Ä–æ–±–æ—Ç—ñ –∑—ñ –∑–≤—ñ—Ç–æ–º ¬´–û—Ç–æ—á–µ–Ω–Ω—è¬ª ' \
                       '—Ç–∞ –æ–ø–∏—Å –ø–æ–ª—ñ–≤ –∑–≤—ñ—Ç—É —î –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:\n' \
                       '–Ø–∫—â–æ –í–∏ –Ω–µ –∑–Ω–∞–π—à–ª–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Å–≤–æ—î –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –¥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n' \
                       '–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É ¬´' + option_comment + '¬ª, –æ–ø–∏—à—ñ—Ç—å –ø—Ä–æ–±–ª–µ–º—É ‚úç —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. ' \
                       '–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–≤\'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –≤ –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏–π —Ç–µ—Ä–º—ñ–Ω üëá'
        # Reports Option: Finance
        elif text == option_reports_finance:
            new_text = '–î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –ø–æ —Ä–æ–±–æ—Ç—ñ –∑—ñ –∑–≤—ñ—Ç–æ–º ¬´–§—ñ–Ω–∞–Ω—Å–æ–≤–∏–π¬ª ' \
                       '—Ç–∞ –æ–ø–∏—Å –ø–æ–ª—ñ–≤ –∑–≤—ñ—Ç—É —î –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:\n' \
                       '–Ø–∫—â–æ –í–∏ –Ω–µ –∑–Ω–∞–π—à–ª–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Å–≤–æ—î –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –¥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n' \
                       '–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É ¬´' + option_comment + '¬ª, –æ–ø–∏—à—ñ—Ç—å –ø—Ä–æ–±–ª–µ–º—É ‚úç —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. ' \
                       '–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–≤\'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –≤ –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏–π —Ç–µ—Ä–º—ñ–Ω üëá'
        # Section Defects
        elif text == option_defects:
            keyboard = menu_defects
        # Defects Option: Account
        elif text == option_defects_account:
            new_text = '–Ø–∫—â–æ –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ñ–¥–∫—Ä–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É üñ• –æ—Å–æ–±–∏—Å—Ç–æ–≥–æ –∫–∞–±—ñ–Ω–µ—Ç—É, ' \
                       '–∞–±–æ –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ ‚ö† –∑–±—ñ–π –≤ —Ä–æ–±–æ—Ç—ñ, –±—É–¥—å –ª–∞—Å–∫–∞, –æ—Ñ–æ—Ä–º—ñ—Ç—å –∑–∞—è–≤–∫—É –≤ —Å–ª—É–∂–±—É –ø—ñ–¥—Ç—Ä–∏–º–∫–∏:\n' \
                       '–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É ¬´' + option_comment + '¬ª, –æ–ø–∏—à—ñ—Ç—å –ø—Ä–æ–±–ª–µ–º—É ‚úç —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. ' \
                       '–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–≤\'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –≤ –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏–π —Ç–µ—Ä–º—ñ–Ω üëá'
        # Defects Option: Orders
        elif text == option_defects_orders:
            new_text = '–Ø–∫—â–æ –≤ –∞–ø—Ç–µ–∫—É –Ω–µ –Ω–∞–¥—Ö–æ–¥—è—Ç—å –≤–∂–µ —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞–º–∏ üõí –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, ' \
                       '–ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ IT-—Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç—ñ–≤ —Å–≤–æ–≥–æ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞!\n' \
                       '–í —Ä–∞–∑—ñ, —è–∫—â–æ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∏ –∞–ø—Ç–µ–∫–∏ –Ω–µ –º–æ–∂—É—Ç—å üòû –≤–∏—Ä—ñ—à–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è, ' \
                       '–∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –¥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n' \
                       '–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É ¬´' + option_comment + '¬ª, –æ–ø–∏—à—ñ—Ç—å –ø—Ä–æ–±–ª–µ–º—É ‚úç —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. ' \
                       '–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–≤\'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –≤ –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏–π —Ç–µ—Ä–º—ñ–Ω üëá'
        # Defects Option: Rests
        elif text == option_defects_rests:
            new_text = '–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è üì¶ –∑–∞–ª–∏—à–∫—ñ–≤ –º–æ–∂–ª–∏–≤–æ, ' \
                       '–≤–∏–∫–æ–Ω–∞–≤—à–∏ –¥—ñ—ó –∑–≥—ñ–¥–Ω–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–á –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:\n' \
                       '–Ø–∫—â–æ –í–∏ –Ω–µ –∑–Ω–∞–π—à–ª–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Å–≤–æ—î –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –¥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n' \
                       '–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É ¬´' + option_comment + '¬ª, –æ–ø–∏—à—ñ—Ç—å –ø—Ä–æ–±–ª–µ–º—É ‚úç —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. ' \
                       '–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–≤\'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –≤ –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏–π —Ç–µ—Ä–º—ñ–Ω üëá'
        # Invalid input response
        else:
            new_text = '–ù–µ–≤—ñ—Ä–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ ‚ö†\n' + new_text
            keyboard = menu_main

        # Setting the client's recent input to memorize a topic
        if text not in (option_ask, option_comment):
            self._set_last_text(client, text)

        # Draw menu
        if new_text:
            await event.reply(new_text, buttons=keyboard)

    async def _get_media_from_message(self, msg):
        user = msg.peer_id.user_id
        media = msg.media
        filepath = ''
        if media is not None:
            filepath = self._settings.path_media(user)
            filepath = await self._telegram.download_media(msg, filepath)

        return filepath

    def _init_clients_data(self):
        """Sets the clients data table"""

        rows = []
        with open(self._settings.path_users(), 'r', encoding='utf-8-sig') as f:
            lines = f.readlines()
            for line in lines:
                data = json.loads(line.replace('\n', ''))
                rows.append(data)

        if len(rows) > 0:
            df = DataFrame(rows)
            df['chatting'] = False
            df['text'] = ''
            df['documenting'] = False
        else:
            df = DataFrame(columns=['id', 'name', 'enterprise', 'manager', 'chatting', 'text', 'documenting'])

        self._clients_data = df

    def _client_name(self, client):
        """Returns a client's name."""

        value = self._get_client_value(client, 'name')
        name = "–ê–Ω–æ–Ω—ñ–º" if value is None else value

        return name

    def _enterprise_by_client(self, client):
        """Returns a code client's enterprise."""

        value = self._get_client_value(client, 'enterprise')
        code = 0 if value is None else value

        return int(code)

    def _set_auth(self, client, name, code, manager):
        """Sets the client as authorized"""

        if self._is_auth(client):
            return

        with open(self._settings.path_users(), 'a', encoding='utf-8') as f:
            data = {
                'id': client,
                'name': name,
                'enterprise': code,
                'manager': manager
            }
            str_data = json.dumps(data, ensure_ascii=False) + '\n'
            f.write(str_data)

        data.update({'chatting': False, 'text': '', 'documenting': False})
        new_row = DataFrame([data])
        self._clients_data = self._clients_data.append(new_row)

    def _is_auth(self, client):
        """Returns either the client is authorized or not."""

        value = self._get_client_value(client, 'id')
        is_auth = False if value is None else True

        return is_auth

    def _set_chatting(self, client, is_chatting):
        """Sets the client as chatting"""

        if self._is_chatting(client) == is_chatting:
            return

        self._set_client_value(client, 'chatting', is_chatting)

    def _is_chatting(self, client):
        """Returns either the client is chatting or not."""

        value = self._get_client_value(client, 'chatting')
        is_chatting = False if value is None else value

        return is_chatting

    def _set_last_text(self, client, text):
        """Sets the client's recent input."""

        if self._get_last_text(client) == text:
            return

        self._set_client_value(client, 'text', text)

    def _get_last_text(self, client):
        """Returns the client's recent input."""

        value = self._get_client_value(client, 'text')
        text = '' if value is None else value

        return text

    def _set_documenting(self, client, is_documenting):
        """Sets the client's documents request."""

        if self._is_documenting(client) == is_documenting:
            return

        self._set_client_value(client, 'documenting', is_documenting)

    def _is_documenting(self, client):
        """Returns the client's documents request."""

        value = self._get_client_value(client, 'documenting')
        is_documenting = False if value is None else value

        return is_documenting

    def _set_client_value(self, client, column, value):
        """Updates the clients' data table"""

        df = self._clients_data
        df.loc[df.id == client, column] = value

    def _get_client_value(self, client, column):
        """Returns a column's value from the clients' data table"""

        try:
            df = self._clients_data
            value = df.loc[df.id == client, column].values[0]
        except:
            value = None

        return value

    def _managers(self):
        """Returns all the managers."""

        return self._get_managers_from_crm()

    def _manager_admin(self):
        """Returns admin manager from the settings"""

        return self._settings.admin_manager()

    def _manager_by_default(self):
        """Returns default manager from the settings if a responsible manager isn't found"""

        return self._settings.default_manager()

    def _manager_by_documents(self):
        """Returns documents manager from the settings if a documents response is sent"""

        return self._settings.documents_manager()

    def _manager_by_enterprise(self, code):
        """Returns an id of manager who is responsible for the given enterprise."""

        managers = self._get_managers_from_crm(code)
        if managers:
            manager = managers[0]
        else:
            manager = self._manager_by_default()

        return manager

    def _manager_by_client(self, client):
        """Returns a manager's id who is responsible for the given client."""

        value = self._get_client_value(client, 'manager')
        manager = 0 if value is None else int(value)
        if not manager:
            manager = self._manager_by_default()

        return manager

    def _clients_by_manager(self, manager):
        """Returns clients' id for the given responsible manager."""

        clients = []

        df = self._clients_data
        data = df.loc[df.manager == manager]
        data = data.sort_values(by=['enterprise', 'name', 'id'])
        for index, row in data.iterrows():
            clients.append({'id': row.id, 'name': row[1], 'enterprise': row.enterprise})

        return clients

    def _get_managers_from_crm(self, code=0):
        """Returns filled managers from CRM"""

        managers = []
        query = """
                    SELECT _Fld1111 AS data
                    FROM [DB].[dbo].[_Reference1111] WITH (NOLOCK)
                    WHERE _Fld1111 > 0
                """
        if code:
            query += """
                        AND _Code IN(
                            SELECT _Fld1111 AS name
                            FROM [DB].[dbo].[_Reference1111] WITH (NOLOCK)
                            WHERE _Code = """ + str(code) + ')'

        data = self._get_data_from_crm(query)
        if data:
            for tg_id in data:
                managers.append(int(tg_id))
        else:
            managers.append(self._manager_by_default())

        return managers

    def _get_enterprises_from_crm(self):
        """Returns enterprises from CRM"""

        codes = []
        query = """
                    SELECT _Code AS data
                    FROM [DB].[dbo].[_Reference1111] WITH (NOLOCK)
                    WHERE _Fld1111RRef = 0x11111111111111111111111111111111
                """
        data = self._get_data_from_crm(query)
        if data:
            for code in data:
                codes.append(int(code))
        else:
            codes.append(666)

        return codes

    def _get_enterprise_name_from_crm(self, code):
        """Returns filled managers from CRM"""

        names = []
        query = """
                    SELECT _Description AS data
                    FROM [DB].[dbo].[_Reference1111] WITH (NOLOCK)
                    WHERE _Code = """ + str(code)
        data = self._get_data_from_crm(query)
        if data:
            for name in data:
                names.append(name)
        else:
            names.append(str(code))

        return names

    @staticmethod
    def _get_data_from_crm(query):
        data = []

        try:
            server = 'server'
            db = 'db'
            user = 'user'
            pw = 'password'

            url = 'DRIVER={ODBC Driver 13 for SQL Server};' + f'SERVER={server};DATABASE={db};UID={user};PWD={pw}'
            connection = pyodbc.connect(url)
            cursor = connection.cursor()
            cursor.execute(query)
            rows = cursor.fetchall()
            for row in rows:
                data.append(row.data)
        except:
            data = []

        return data
